type token =
  | T_EOF
  | T_ANDDEF
  | T_ARRAY
  | T_BEGIN
  | T_DELETE
  | T_DIM
  | T_DO
  | T_DONE
  | T_DOWNTO
  | T_ELSE
  | T_END
  | T_FOR
  | T_IF
  | T_IN
  | T_LET
  | T_MATCH
  | T_MUTABLE
  | T_NEW
  | T_NOT
  | T_OF
  | T_REC
  | T_REF
  | T_THEN
  | T_TO
  | T_TYPE
  | T_WHILE
  | T_WITH
  | T_ID
  | T_CID
  | T_FLOAT
  | T_INT
  | T_CHAR
  | T_CONSTCHAR
  | T_STRING
  | T_FALSE
  | T_TRUE
  | T_BOOL
  | T_UNIT
  | T_FLOATST
  | T_INTST
  | T_GIVES
  | T_SEQ
  | T_BAR
  | T_PLUS
  | T_MINUS
  | T_TIMES
  | T_DIV
  | T_MOD
  | T_FPLUS
  | T_FMINUS
  | T_FTIMES
  | T_FDIV
  | T_POWER
  | T_BANK
  | T_SMCOLON
  | T_AND
  | T_OR
  | T_NSEQ
  | T_L
  | T_G
  | T_LE
  | T_GE
  | T_EQ
  | T_NEQ
  | T_ASSIGN
  | T_LPAR
  | T_RPAR
  | T_LBRACK
  | T_RBRACK
  | T_COMA
  | T_COLON

open Parsing;;
let yytransl_const = [|
  257 (* T_EOF *);
  258 (* T_ANDDEF *);
  259 (* T_ARRAY *);
  260 (* T_BEGIN *);
  261 (* T_DELETE *);
  262 (* T_DIM *);
  263 (* T_DO *);
  264 (* T_DONE *);
  265 (* T_DOWNTO *);
  266 (* T_ELSE *);
  267 (* T_END *);
  268 (* T_FOR *);
  269 (* T_IF *);
  270 (* T_IN *);
  271 (* T_LET *);
  272 (* T_MATCH *);
  273 (* T_MUTABLE *);
  274 (* T_NEW *);
  275 (* T_NOT *);
  276 (* T_OF *);
  277 (* T_REC *);
  278 (* T_REF *);
  279 (* T_THEN *);
  280 (* T_TO *);
  281 (* T_TYPE *);
  282 (* T_WHILE *);
  283 (* T_WITH *);
  284 (* T_ID *);
  285 (* T_CID *);
  286 (* T_FLOAT *);
  287 (* T_INT *);
  288 (* T_CHAR *);
  289 (* T_CONSTCHAR *);
  290 (* T_STRING *);
  291 (* T_FALSE *);
  292 (* T_TRUE *);
  293 (* T_BOOL *);
  294 (* T_UNIT *);
  295 (* T_FLOATST *);
  296 (* T_INTST *);
  297 (* T_GIVES *);
  298 (* T_SEQ *);
  299 (* T_BAR *);
  300 (* T_PLUS *);
  301 (* T_MINUS *);
  302 (* T_TIMES *);
  303 (* T_DIV *);
  304 (* T_MOD *);
  305 (* T_FPLUS *);
  306 (* T_FMINUS *);
  307 (* T_FTIMES *);
  308 (* T_FDIV *);
  309 (* T_POWER *);
  310 (* T_BANK *);
  311 (* T_SMCOLON *);
  312 (* T_AND *);
  313 (* T_OR *);
  314 (* T_NSEQ *);
  315 (* T_L *);
  316 (* T_G *);
  317 (* T_LE *);
  318 (* T_GE *);
  319 (* T_EQ *);
  320 (* T_NEQ *);
  321 (* T_ASSIGN *);
  322 (* T_LPAR *);
  323 (* T_RPAR *);
  324 (* T_LBRACK *);
  325 (* T_RBRACK *);
  326 (* T_COMA *);
  327 (* T_COLON *);
    0|]

let yytransl_block = [|
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\003\000\005\000\005\000\007\000\
\007\000\006\000\006\000\006\000\008\000\008\000\008\000\009\000\
\009\000\004\000\014\000\014\000\013\000\016\000\016\000\015\000\
\017\000\017\000\018\000\018\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\019\000\019\000\
\020\000\020\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\011\000\011\000\
\025\000\025\000\021\000\021\000\022\000\022\000\024\000\024\000\
\023\000\027\000\027\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\029\000\029\000\030\000\030\000\031\000\
\031\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\004\000\000\000\001\000\000\000\
\003\000\005\000\003\000\007\000\000\000\002\000\006\000\000\000\
\002\000\003\000\000\000\003\000\004\000\000\000\003\000\002\000\
\000\000\003\000\001\000\002\000\001\000\001\000\001\000\001\000\
\001\000\003\000\003\000\002\000\004\000\001\000\000\000\004\000\
\000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\002\000\002\000\002\000\002\000\002\000\003\000\005\000\009\000\
\003\000\002\000\006\000\004\000\003\000\006\000\002\000\002\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\002\000\
\001\000\001\000\002\000\002\000\005\000\003\000\000\000\003\000\
\001\000\002\000\001\000\001\000\000\000\001\000\000\000\003\000\
\003\000\001\000\002\000\002\000\002\000\001\000\001\000\001\000\
\001\000\001\000\003\000\001\000\002\000\001\000\001\000\001\000\
\001\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\122\000\000\000\001\000\000\000\000\000\003\000\
\004\000\007\000\000\000\000\000\019\000\000\000\013\000\008\000\
\000\000\000\000\000\000\000\000\000\000\025\000\022\000\000\000\
\000\000\000\000\011\000\014\000\000\000\000\000\000\000\000\000\
\000\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\083\000\082\000\084\000\
\085\000\087\000\086\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\081\000\000\000\038\000\031\000\032\000\
\029\000\033\000\030\000\000\000\000\000\000\000\000\000\009\000\
\000\000\000\000\000\000\000\000\102\000\000\000\000\000\000\000\
\000\000\000\000\000\000\089\000\091\000\000\000\000\000\080\000\
\000\000\079\000\065\000\068\000\066\000\067\000\092\000\088\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\036\000\000\000\000\000\000\000\
\000\000\000\000\023\000\070\000\073\000\000\000\000\000\000\000\
\000\000\000\000\098\000\094\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\041\000\000\000\034\000\
\000\000\000\000\000\000\000\000\000\000\113\000\000\000\110\000\
\112\000\111\000\118\000\119\000\120\000\121\000\000\000\103\000\
\000\000\106\000\000\000\000\000\000\000\000\000\012\000\000\000\
\000\000\037\000\015\000\100\000\099\000\000\000\000\000\114\000\
\116\000\000\000\000\000\000\000\000\000\108\000\109\000\071\000\
\093\000\040\000\000\000\000\000\000\000\117\000\115\000\078\000\
\000\000\000\000\042\000\000\000\104\000\000\000\072\000"

let yydgoto = "\002\000\
\003\000\004\000\058\000\009\000\011\000\016\000\021\000\020\000\
\027\000\059\000\121\000\069\000\013\000\018\000\023\000\033\000\
\032\000\130\000\123\000\193\000\198\000\078\000\184\000\204\000\
\088\000\060\000\185\000\186\000\202\000\187\000\188\000"

let yysindex = "\031\000\
\000\000\000\000\000\000\053\000\000\000\012\255\011\255\000\000\
\000\000\000\000\009\255\002\255\000\000\020\255\000\000\000\000\
\033\255\088\255\219\254\235\254\096\255\000\000\000\000\011\255\
\134\006\021\255\000\000\000\000\073\255\061\255\009\255\093\255\
\065\255\000\000\134\006\134\006\085\255\112\255\134\006\134\006\
\021\255\147\007\134\006\134\007\147\007\000\000\000\000\000\000\
\000\000\000\000\000\000\134\006\134\006\134\006\134\006\147\007\
\078\006\104\255\245\007\000\000\057\255\000\000\000\000\000\000\
\000\000\000\000\000\000\021\255\255\254\076\255\134\006\000\000\
\021\255\033\255\087\007\102\000\000\000\122\255\109\255\170\007\
\197\007\255\254\086\255\000\000\000\000\159\006\134\006\000\000\
\147\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\221\007\134\006\134\006\134\006\134\006\134\006\134\006\134\006\
\134\006\134\006\134\006\134\006\134\006\134\006\134\006\134\006\
\134\006\134\006\134\006\134\006\134\006\134\006\134\006\134\006\
\228\254\107\255\135\255\240\254\000\000\021\255\021\255\245\007\
\255\254\021\255\000\000\000\000\000\000\134\006\134\006\052\003\
\134\006\245\007\000\000\000\000\245\007\102\000\034\000\034\000\
\103\255\103\255\103\255\034\000\034\000\103\255\103\255\103\255\
\013\008\061\008\037\008\102\000\102\000\102\000\102\000\102\000\
\102\000\102\000\102\000\098\255\134\006\000\000\021\255\000\000\
\255\254\244\254\255\254\031\007\055\007\000\000\122\003\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\052\003\000\000\
\126\255\000\000\145\255\138\255\218\006\041\255\000\000\245\007\
\051\255\000\000\000\000\000\000\000\000\134\006\134\006\000\000\
\000\000\122\003\114\255\003\255\134\006\000\000\000\000\000\000\
\000\000\000\000\136\255\183\006\245\007\000\000\000\000\000\000\
\052\003\245\007\000\000\134\006\000\000\242\006\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\010\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\115\000\092\255\142\255\090\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\137\255\
\059\000\000\000\000\000\000\000\158\255\000\000\000\000\000\000\
\000\000\000\000\000\000\048\000\118\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\054\255\000\000\170\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\240\002\000\000\000\000\000\000\
\000\000\000\000\000\000\004\004\000\000\000\000\000\000\000\000\
\000\000\188\000\164\255\000\000\000\000\000\000\000\000\000\000\
\002\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\051\000\
\094\255\245\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\054\255\000\000\000\000\134\255\041\004\236\002\050\003\
\072\001\142\001\212\001\120\003\190\003\026\002\096\002\166\002\
\192\005\078\004\155\005\115\004\152\004\189\004\226\004\007\005\
\044\005\081\005\118\005\092\255\000\000\000\000\000\000\000\000\
\234\255\000\000\049\006\000\000\006\006\000\000\243\254\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\058\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\045\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\229\005\000\000\000\000\000\000\
\000\000\004\255\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\192\000\000\000\000\000\171\000\000\000\000\000\
\238\255\221\255\067\000\218\255\208\000\000\000\164\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\022\000\000\000\
\224\255\223\255\057\000\097\255\000\000\000\000\000\000"

let yytablesize = 2430
let yytable = "\075\000\
\076\000\030\000\082\000\080\000\081\000\125\000\028\000\086\000\
\085\000\125\000\089\000\089\000\090\000\216\000\105\000\201\000\
\091\000\092\000\093\000\094\000\125\000\097\000\095\000\061\000\
\126\000\014\000\006\000\114\000\126\000\124\000\025\000\001\000\
\010\000\026\000\129\000\128\000\015\000\006\000\012\000\126\000\
\164\000\165\000\214\000\017\000\029\000\217\000\105\000\019\000\
\062\000\026\000\168\000\138\000\063\000\114\000\195\000\089\000\
\139\000\064\000\065\000\066\000\067\000\022\000\141\000\142\000\
\143\000\144\000\145\000\146\000\147\000\148\000\149\000\150\000\
\151\000\152\000\153\000\154\000\155\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\107\000\068\000\169\000\
\170\000\024\000\005\000\171\000\016\000\016\000\027\000\027\000\
\027\000\031\000\172\000\173\000\070\000\189\000\071\000\005\000\
\005\000\016\000\016\000\074\000\027\000\209\000\165\000\107\000\
\073\000\027\000\005\000\077\000\016\000\098\000\027\000\210\000\
\211\000\027\000\095\000\095\000\122\000\027\000\096\000\096\000\
\194\000\192\000\027\000\027\000\027\000\027\000\077\000\077\000\
\027\000\024\000\024\000\079\000\077\000\077\000\077\000\077\000\
\077\000\191\000\127\000\077\000\077\000\133\000\134\000\024\000\
\166\000\087\000\167\000\109\000\077\000\077\000\077\000\027\000\
\077\000\024\000\212\000\213\000\090\000\090\000\205\000\207\000\
\026\000\218\000\090\000\090\000\090\000\090\000\090\000\206\000\
\077\000\090\000\090\000\024\000\215\000\219\000\090\000\016\000\
\222\000\101\000\090\000\090\000\090\000\039\000\090\000\090\000\
\090\000\090\000\090\000\008\000\090\000\090\000\090\000\090\000\
\077\000\072\000\077\000\077\000\190\000\090\000\090\000\090\000\
\090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
\090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
\090\000\090\000\090\000\090\000\090\000\090\000\090\000\034\000\
\090\000\090\000\035\000\035\000\035\000\131\000\221\000\203\000\
\035\000\035\000\035\000\035\000\035\000\026\000\026\000\035\000\
\035\000\000\000\000\000\000\000\000\000\035\000\000\000\000\000\
\035\000\035\000\035\000\026\000\035\000\035\000\000\000\000\000\
\026\000\035\000\000\000\000\000\000\000\026\000\035\000\035\000\
\035\000\035\000\000\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\026\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\000\000\035\000\035\000\
\090\000\090\000\000\000\010\000\010\000\005\000\090\000\090\000\
\090\000\090\000\090\000\021\000\021\000\090\000\090\000\000\000\
\010\000\010\000\000\000\006\000\000\000\000\000\090\000\090\000\
\090\000\021\000\090\000\010\000\000\000\007\000\000\000\102\000\
\103\000\104\000\000\000\021\000\107\000\108\000\109\000\000\000\
\000\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
\090\000\090\000\090\000\090\000\090\000\000\000\090\000\090\000\
\090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
\090\000\000\000\090\000\018\000\090\000\090\000\089\000\089\000\
\000\000\000\000\000\000\000\000\089\000\089\000\089\000\089\000\
\089\000\018\000\000\000\089\000\089\000\000\000\000\000\000\000\
\000\000\000\000\000\000\018\000\089\000\089\000\089\000\000\000\
\089\000\100\000\101\000\102\000\103\000\104\000\105\000\106\000\
\107\000\108\000\109\000\000\000\000\000\000\000\000\000\089\000\
\089\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
\089\000\089\000\089\000\000\000\089\000\089\000\089\000\089\000\
\089\000\089\000\089\000\089\000\089\000\089\000\089\000\000\000\
\089\000\000\000\089\000\089\000\074\000\074\000\000\000\000\000\
\000\000\000\000\074\000\074\000\074\000\074\000\074\000\000\000\
\000\000\074\000\074\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\074\000\074\000\074\000\000\000\074\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\074\000\074\000\074\000\
\074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
\074\000\000\000\074\000\074\000\074\000\074\000\074\000\074\000\
\074\000\074\000\074\000\074\000\074\000\000\000\074\000\000\000\
\074\000\074\000\097\000\097\000\000\000\000\000\000\000\000\000\
\097\000\097\000\097\000\097\000\097\000\000\000\000\000\097\000\
\097\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\097\000\097\000\097\000\000\000\097\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\097\000\097\000\097\000\097\000\097\000\
\097\000\097\000\097\000\097\000\097\000\097\000\097\000\000\000\
\097\000\097\000\097\000\097\000\097\000\097\000\097\000\097\000\
\097\000\097\000\097\000\000\000\097\000\000\000\097\000\097\000\
\047\000\047\000\000\000\000\000\000\000\000\000\047\000\047\000\
\047\000\047\000\047\000\000\000\000\000\047\000\047\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\047\000\047\000\
\047\000\000\000\047\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\000\000\000\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\000\000\047\000\000\000\047\000\047\000\049\000\049\000\
\000\000\000\000\000\000\000\000\049\000\049\000\049\000\049\000\
\049\000\000\000\000\000\049\000\049\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\049\000\049\000\049\000\000\000\
\049\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\000\000\000\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\000\000\
\049\000\000\000\049\000\049\000\051\000\051\000\000\000\000\000\
\000\000\000\000\051\000\051\000\051\000\051\000\051\000\000\000\
\000\000\051\000\051\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\051\000\051\000\051\000\000\000\051\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\000\000\000\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\000\000\051\000\000\000\
\051\000\051\000\048\000\048\000\000\000\000\000\000\000\000\000\
\048\000\048\000\048\000\048\000\048\000\000\000\000\000\048\000\
\048\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\048\000\048\000\048\000\000\000\048\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\000\000\000\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\000\000\048\000\000\000\048\000\048\000\
\050\000\050\000\000\000\000\000\000\000\000\000\050\000\050\000\
\050\000\050\000\050\000\000\000\000\000\050\000\050\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\050\000\050\000\
\050\000\000\000\050\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\000\000\000\000\050\000\050\000\
\050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
\050\000\000\000\050\000\000\000\050\000\050\000\052\000\052\000\
\000\000\000\000\000\000\000\000\052\000\052\000\052\000\052\000\
\052\000\000\000\000\000\052\000\052\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\052\000\052\000\052\000\000\000\
\052\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\052\000\000\000\000\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\000\000\
\052\000\000\000\052\000\052\000\044\000\044\000\000\000\000\000\
\017\000\017\000\044\000\044\000\044\000\044\000\044\000\000\000\
\000\000\044\000\044\000\000\000\000\000\017\000\017\000\000\000\
\000\000\000\000\044\000\044\000\044\000\000\000\044\000\000\000\
\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\044\000\044\000\044\000\
\044\000\017\000\000\000\000\000\044\000\044\000\000\000\000\000\
\000\000\000\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\000\000\044\000\000\000\
\044\000\044\000\045\000\045\000\000\000\000\000\000\000\000\000\
\045\000\045\000\045\000\045\000\045\000\000\000\000\000\045\000\
\045\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\045\000\045\000\045\000\000\000\045\000\000\000\000\000\174\000\
\175\000\000\000\000\000\000\000\176\000\000\000\177\000\178\000\
\000\000\000\000\000\000\045\000\045\000\045\000\045\000\179\000\
\180\000\000\000\045\000\045\000\181\000\182\000\000\000\000\000\
\045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\000\000\045\000\183\000\045\000\045\000\
\043\000\043\000\000\000\000\000\000\000\000\000\043\000\043\000\
\043\000\043\000\043\000\000\000\000\000\043\000\043\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\043\000\043\000\
\043\000\000\000\043\000\000\000\000\000\174\000\200\000\000\000\
\000\000\000\000\176\000\000\000\177\000\178\000\000\000\000\000\
\000\000\043\000\043\000\043\000\043\000\179\000\180\000\000\000\
\043\000\043\000\181\000\182\000\000\000\000\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\000\000\043\000\183\000\043\000\043\000\046\000\046\000\
\000\000\000\000\000\000\000\000\046\000\046\000\046\000\046\000\
\046\000\000\000\000\000\046\000\046\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\046\000\046\000\046\000\000\000\
\046\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\046\000\
\046\000\046\000\046\000\000\000\000\000\000\000\046\000\046\000\
\000\000\000\000\000\000\000\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\000\000\
\046\000\000\000\046\000\046\000\069\000\069\000\000\000\000\000\
\000\000\000\000\069\000\069\000\069\000\069\000\069\000\000\000\
\000\000\069\000\069\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\069\000\069\000\069\000\000\000\069\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\053\000\053\000\000\000\000\000\000\000\069\000\053\000\
\053\000\053\000\053\000\053\000\000\000\000\000\053\000\053\000\
\000\000\000\000\069\000\069\000\069\000\000\000\000\000\053\000\
\053\000\053\000\000\000\053\000\000\000\000\000\069\000\000\000\
\069\000\069\000\000\000\000\000\000\000\000\000\061\000\061\000\
\000\000\000\000\000\000\053\000\061\000\061\000\061\000\061\000\
\061\000\000\000\000\000\061\000\061\000\000\000\000\000\053\000\
\053\000\053\000\000\000\000\000\061\000\061\000\061\000\000\000\
\061\000\000\000\000\000\053\000\000\000\053\000\053\000\000\000\
\000\000\000\000\000\000\054\000\054\000\000\000\000\000\000\000\
\061\000\054\000\054\000\054\000\054\000\054\000\000\000\000\000\
\054\000\054\000\000\000\000\000\061\000\061\000\061\000\000\000\
\000\000\054\000\054\000\054\000\000\000\054\000\000\000\000\000\
\061\000\000\000\061\000\061\000\000\000\000\000\000\000\000\000\
\055\000\055\000\000\000\000\000\000\000\054\000\055\000\055\000\
\055\000\055\000\055\000\000\000\000\000\055\000\055\000\000\000\
\000\000\054\000\054\000\054\000\000\000\000\000\055\000\055\000\
\055\000\000\000\055\000\000\000\000\000\054\000\000\000\054\000\
\054\000\000\000\000\000\000\000\000\000\056\000\056\000\000\000\
\000\000\000\000\055\000\056\000\056\000\056\000\056\000\056\000\
\000\000\000\000\056\000\056\000\000\000\000\000\055\000\055\000\
\055\000\000\000\000\000\056\000\056\000\056\000\000\000\056\000\
\000\000\000\000\055\000\000\000\055\000\055\000\000\000\000\000\
\000\000\000\000\057\000\057\000\000\000\000\000\000\000\056\000\
\057\000\057\000\057\000\057\000\057\000\000\000\000\000\057\000\
\057\000\000\000\000\000\056\000\056\000\056\000\000\000\000\000\
\057\000\057\000\057\000\000\000\057\000\000\000\000\000\056\000\
\000\000\056\000\056\000\000\000\000\000\000\000\000\000\058\000\
\058\000\000\000\000\000\000\000\057\000\058\000\058\000\058\000\
\058\000\058\000\000\000\000\000\058\000\058\000\000\000\000\000\
\057\000\057\000\057\000\000\000\000\000\058\000\058\000\058\000\
\000\000\058\000\000\000\000\000\057\000\000\000\057\000\057\000\
\000\000\000\000\000\000\000\000\059\000\059\000\000\000\000\000\
\000\000\058\000\059\000\059\000\059\000\059\000\059\000\000\000\
\000\000\059\000\059\000\000\000\000\000\058\000\058\000\058\000\
\000\000\000\000\059\000\059\000\059\000\000\000\059\000\000\000\
\000\000\058\000\000\000\058\000\058\000\000\000\000\000\000\000\
\000\000\060\000\060\000\000\000\000\000\000\000\059\000\060\000\
\060\000\060\000\060\000\060\000\000\000\000\000\060\000\060\000\
\000\000\000\000\059\000\059\000\059\000\000\000\000\000\060\000\
\060\000\060\000\000\000\060\000\000\000\000\000\059\000\000\000\
\059\000\059\000\000\000\000\000\000\000\000\000\064\000\064\000\
\000\000\000\000\000\000\060\000\064\000\064\000\064\000\064\000\
\064\000\000\000\000\000\064\000\064\000\000\000\000\000\060\000\
\060\000\060\000\000\000\000\000\064\000\064\000\064\000\000\000\
\064\000\000\000\000\000\060\000\000\000\060\000\060\000\000\000\
\000\000\000\000\000\000\062\000\062\000\000\000\000\000\000\000\
\064\000\062\000\062\000\062\000\062\000\062\000\000\000\000\000\
\062\000\062\000\000\000\000\000\064\000\064\000\064\000\000\000\
\000\000\062\000\062\000\062\000\000\000\062\000\000\000\000\000\
\064\000\000\000\064\000\064\000\000\000\000\000\000\000\000\000\
\063\000\063\000\000\000\000\000\000\000\062\000\063\000\063\000\
\063\000\063\000\063\000\000\000\000\000\063\000\063\000\000\000\
\000\000\062\000\000\000\062\000\000\000\000\000\063\000\063\000\
\063\000\000\000\063\000\000\000\000\000\062\000\000\000\062\000\
\062\000\000\000\000\000\000\000\000\000\075\000\075\000\000\000\
\000\000\000\000\063\000\075\000\075\000\075\000\075\000\075\000\
\000\000\000\000\075\000\075\000\000\000\000\000\063\000\000\000\
\000\000\000\000\000\000\075\000\075\000\075\000\000\000\075\000\
\000\000\000\000\063\000\000\000\063\000\063\000\076\000\076\000\
\000\000\000\000\000\000\000\000\076\000\076\000\076\000\075\000\
\076\000\000\000\000\000\076\000\076\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\076\000\076\000\076\000\000\000\
\076\000\000\000\000\000\000\000\000\000\000\000\000\000\075\000\
\000\000\075\000\075\000\000\000\000\000\000\000\000\000\000\000\
\076\000\028\000\028\000\028\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\028\000\
\000\000\000\000\000\000\000\000\028\000\000\000\000\000\000\000\
\076\000\028\000\076\000\076\000\028\000\000\000\000\000\000\000\
\028\000\035\000\036\000\037\000\000\000\028\000\028\000\028\000\
\028\000\038\000\039\000\028\000\006\000\040\000\000\000\041\000\
\042\000\000\000\000\000\000\000\000\000\000\000\000\000\043\000\
\000\000\044\000\045\000\046\000\047\000\000\000\048\000\049\000\
\050\000\051\000\028\000\000\000\000\000\000\000\000\000\000\000\
\000\000\052\000\053\000\000\000\000\000\000\000\054\000\055\000\
\000\000\000\000\000\000\056\000\000\000\000\000\000\000\000\000\
\000\000\035\000\036\000\037\000\000\000\000\000\000\000\057\000\
\096\000\038\000\039\000\000\000\006\000\040\000\000\000\041\000\
\042\000\000\000\000\000\000\000\000\000\000\000\000\000\043\000\
\000\000\044\000\045\000\046\000\047\000\137\000\048\000\049\000\
\050\000\051\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\052\000\053\000\000\000\000\000\000\000\054\000\055\000\
\000\000\000\000\000\000\056\000\000\000\220\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\057\000\
\099\000\000\000\100\000\101\000\102\000\103\000\104\000\105\000\
\106\000\107\000\108\000\109\000\000\000\110\000\111\000\112\000\
\113\000\114\000\115\000\116\000\117\000\118\000\119\000\120\000\
\099\000\208\000\100\000\101\000\102\000\103\000\104\000\105\000\
\106\000\107\000\108\000\109\000\000\000\110\000\111\000\112\000\
\113\000\114\000\115\000\116\000\117\000\118\000\119\000\120\000\
\000\000\223\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\099\000\000\000\100\000\101\000\102\000\
\103\000\104\000\105\000\106\000\107\000\108\000\109\000\000\000\
\110\000\111\000\112\000\113\000\114\000\115\000\116\000\117\000\
\118\000\119\000\120\000\099\000\000\000\100\000\101\000\102\000\
\103\000\104\000\105\000\106\000\107\000\108\000\109\000\196\000\
\110\000\111\000\112\000\113\000\114\000\115\000\116\000\117\000\
\118\000\119\000\120\000\000\000\000\000\000\000\197\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\099\000\000\000\100\000\101\000\102\000\103\000\104\000\105\000\
\106\000\107\000\108\000\109\000\000\000\110\000\111\000\112\000\
\113\000\114\000\115\000\116\000\117\000\118\000\119\000\120\000\
\099\000\132\000\100\000\101\000\102\000\103\000\104\000\105\000\
\106\000\107\000\108\000\109\000\000\000\110\000\111\000\112\000\
\113\000\114\000\115\000\116\000\117\000\118\000\119\000\120\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\099\000\000\000\100\000\101\000\102\000\103\000\104\000\105\000\
\106\000\107\000\108\000\109\000\000\000\110\000\111\000\112\000\
\113\000\114\000\115\000\116\000\117\000\118\000\119\000\120\000\
\042\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\083\000\084\000\046\000\047\000\042\000\048\000\049\000\
\050\000\051\000\000\000\000\000\000\000\000\000\083\000\084\000\
\046\000\047\000\000\000\048\000\049\000\050\000\051\000\000\000\
\000\000\000\000\000\000\056\000\000\000\000\000\000\000\000\000\
\135\000\000\000\000\000\000\000\000\000\000\000\000\000\057\000\
\056\000\087\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\099\000\057\000\100\000\101\000\102\000\
\103\000\104\000\105\000\106\000\107\000\108\000\109\000\136\000\
\110\000\111\000\112\000\113\000\114\000\115\000\116\000\117\000\
\118\000\119\000\120\000\000\000\000\000\000\000\099\000\000\000\
\100\000\101\000\102\000\103\000\104\000\105\000\106\000\107\000\
\108\000\109\000\000\000\110\000\111\000\112\000\113\000\114\000\
\115\000\116\000\117\000\118\000\119\000\120\000\099\000\000\000\
\100\000\101\000\102\000\103\000\104\000\105\000\106\000\107\000\
\108\000\109\000\000\000\110\000\111\000\112\000\113\000\114\000\
\115\000\116\000\117\000\118\000\119\000\120\000\099\000\140\000\
\100\000\101\000\102\000\103\000\104\000\105\000\106\000\107\000\
\108\000\109\000\000\000\110\000\111\000\112\000\113\000\114\000\
\115\000\116\000\117\000\118\000\119\000\120\000\099\000\000\000\
\100\000\101\000\102\000\103\000\104\000\105\000\106\000\107\000\
\108\000\109\000\000\000\000\000\111\000\112\000\113\000\114\000\
\115\000\116\000\117\000\118\000\119\000\120\000\099\000\000\000\
\100\000\101\000\102\000\103\000\104\000\105\000\106\000\107\000\
\108\000\109\000\000\000\000\000\111\000\000\000\113\000\114\000\
\115\000\116\000\117\000\118\000\119\000\120\000\099\000\000\000\
\100\000\101\000\102\000\103\000\104\000\105\000\106\000\107\000\
\108\000\109\000\000\000\000\000\000\000\000\000\113\000\114\000\
\115\000\116\000\117\000\118\000\119\000\120\000"

let yycheck = "\035\000\
\036\000\020\000\041\000\039\000\040\000\022\001\028\001\043\000\
\042\000\022\001\044\000\045\000\045\000\011\001\011\001\175\000\
\052\000\053\000\054\000\055\000\022\001\057\000\056\000\003\001\
\041\001\017\001\017\001\041\001\041\001\068\000\068\001\001\000\
\021\001\071\001\073\000\071\000\028\001\028\001\028\001\041\001\
\069\001\070\001\202\000\042\001\066\001\043\001\043\001\028\001\
\028\001\071\001\067\001\087\000\032\001\067\001\067\001\089\000\
\089\000\037\001\038\001\039\001\040\001\029\001\098\000\099\000\
\100\000\101\000\102\000\103\000\104\000\105\000\106\000\107\000\
\108\000\109\000\110\000\111\000\112\000\113\000\114\000\115\000\
\116\000\117\000\118\000\119\000\120\000\041\001\066\001\126\000\
\127\000\002\001\001\001\130\000\001\001\002\001\001\001\002\001\
\003\001\002\001\134\000\135\000\028\001\137\000\042\001\014\001\
\015\001\014\001\015\001\043\001\015\001\069\001\070\001\067\001\
\020\001\020\001\025\001\031\001\025\001\014\001\025\001\069\001\
\070\001\028\001\069\001\070\001\068\001\032\001\069\001\070\001\
\167\000\165\000\037\001\038\001\039\001\040\001\001\001\002\001\
\043\001\001\001\002\001\028\001\007\001\008\001\009\001\010\001\
\011\001\164\000\071\001\014\001\015\001\028\001\042\001\015\001\
\046\001\068\001\020\001\053\001\023\001\024\001\025\001\066\001\
\027\001\025\001\198\000\199\000\001\001\002\001\041\001\030\001\
\071\001\205\000\007\001\008\001\009\001\010\001\011\001\031\001\
\043\001\014\001\015\001\043\001\067\001\046\001\019\001\042\001\
\220\000\028\001\023\001\024\001\025\001\020\001\027\001\028\001\
\029\001\030\001\031\001\004\000\033\001\034\001\035\001\036\001\
\067\001\031\000\069\001\070\001\138\000\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\062\001\063\001\064\001\065\001\066\001\067\001\024\000\
\069\001\070\001\001\001\002\001\003\001\074\000\217\000\183\000\
\007\001\008\001\009\001\010\001\011\001\001\001\002\001\014\001\
\015\001\255\255\255\255\255\255\255\255\020\001\255\255\255\255\
\023\001\024\001\025\001\015\001\027\001\028\001\255\255\255\255\
\020\001\032\001\255\255\255\255\255\255\025\001\037\001\038\001\
\039\001\040\001\255\255\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\043\001\
\055\001\056\001\057\001\058\001\059\001\060\001\061\001\062\001\
\063\001\064\001\065\001\066\001\067\001\255\255\069\001\070\001\
\001\001\002\001\255\255\001\001\002\001\001\001\007\001\008\001\
\009\001\010\001\011\001\001\001\002\001\014\001\015\001\255\255\
\014\001\015\001\255\255\015\001\255\255\255\255\023\001\024\001\
\025\001\015\001\027\001\025\001\255\255\025\001\255\255\046\001\
\047\001\048\001\255\255\025\001\051\001\052\001\053\001\255\255\
\255\255\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\255\255\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\064\001\
\065\001\255\255\067\001\001\001\069\001\070\001\001\001\002\001\
\255\255\255\255\255\255\255\255\007\001\008\001\009\001\010\001\
\011\001\015\001\255\255\014\001\015\001\255\255\255\255\255\255\
\255\255\255\255\255\255\025\001\023\001\024\001\025\001\255\255\
\027\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\255\255\255\255\255\255\255\255\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\255\255\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\062\001\063\001\064\001\065\001\255\255\
\067\001\255\255\069\001\070\001\001\001\002\001\255\255\255\255\
\255\255\255\255\007\001\008\001\009\001\010\001\011\001\255\255\
\255\255\014\001\015\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\023\001\024\001\025\001\255\255\027\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\255\255\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\062\001\063\001\064\001\065\001\255\255\067\001\255\255\
\069\001\070\001\001\001\002\001\255\255\255\255\255\255\255\255\
\007\001\008\001\009\001\010\001\011\001\255\255\255\255\014\001\
\015\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\023\001\024\001\025\001\255\255\027\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\255\255\
\055\001\056\001\057\001\058\001\059\001\060\001\061\001\062\001\
\063\001\064\001\065\001\255\255\067\001\255\255\069\001\070\001\
\001\001\002\001\255\255\255\255\255\255\255\255\007\001\008\001\
\009\001\010\001\011\001\255\255\255\255\014\001\015\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\023\001\024\001\
\025\001\255\255\027\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\255\255\255\255\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\064\001\
\065\001\255\255\067\001\255\255\069\001\070\001\001\001\002\001\
\255\255\255\255\255\255\255\255\007\001\008\001\009\001\010\001\
\011\001\255\255\255\255\014\001\015\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\023\001\024\001\025\001\255\255\
\027\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\255\255\255\255\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\062\001\063\001\064\001\065\001\255\255\
\067\001\255\255\069\001\070\001\001\001\002\001\255\255\255\255\
\255\255\255\255\007\001\008\001\009\001\010\001\011\001\255\255\
\255\255\014\001\015\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\023\001\024\001\025\001\255\255\027\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\255\255\255\255\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\062\001\063\001\064\001\065\001\255\255\067\001\255\255\
\069\001\070\001\001\001\002\001\255\255\255\255\255\255\255\255\
\007\001\008\001\009\001\010\001\011\001\255\255\255\255\014\001\
\015\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\023\001\024\001\025\001\255\255\027\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\255\255\255\255\
\055\001\056\001\057\001\058\001\059\001\060\001\061\001\062\001\
\063\001\064\001\065\001\255\255\067\001\255\255\069\001\070\001\
\001\001\002\001\255\255\255\255\255\255\255\255\007\001\008\001\
\009\001\010\001\011\001\255\255\255\255\014\001\015\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\023\001\024\001\
\025\001\255\255\027\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\255\255\255\255\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\064\001\
\065\001\255\255\067\001\255\255\069\001\070\001\001\001\002\001\
\255\255\255\255\255\255\255\255\007\001\008\001\009\001\010\001\
\011\001\255\255\255\255\014\001\015\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\023\001\024\001\025\001\255\255\
\027\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\255\255\255\255\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\062\001\063\001\064\001\065\001\255\255\
\067\001\255\255\069\001\070\001\001\001\002\001\255\255\255\255\
\001\001\002\001\007\001\008\001\009\001\010\001\011\001\255\255\
\255\255\014\001\015\001\255\255\255\255\014\001\015\001\255\255\
\255\255\255\255\023\001\024\001\025\001\255\255\027\001\255\255\
\025\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\042\001\043\001\044\001\
\045\001\042\001\255\255\255\255\049\001\050\001\255\255\255\255\
\255\255\255\255\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\062\001\063\001\064\001\065\001\255\255\067\001\255\255\
\069\001\070\001\001\001\002\001\255\255\255\255\255\255\255\255\
\007\001\008\001\009\001\010\001\011\001\255\255\255\255\014\001\
\015\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\023\001\024\001\025\001\255\255\027\001\255\255\255\255\028\001\
\029\001\255\255\255\255\255\255\033\001\255\255\035\001\036\001\
\255\255\255\255\255\255\042\001\043\001\044\001\045\001\044\001\
\045\001\255\255\049\001\050\001\049\001\050\001\255\255\255\255\
\055\001\056\001\057\001\058\001\059\001\060\001\061\001\062\001\
\063\001\064\001\065\001\255\255\067\001\066\001\069\001\070\001\
\001\001\002\001\255\255\255\255\255\255\255\255\007\001\008\001\
\009\001\010\001\011\001\255\255\255\255\014\001\015\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\023\001\024\001\
\025\001\255\255\027\001\255\255\255\255\028\001\029\001\255\255\
\255\255\255\255\033\001\255\255\035\001\036\001\255\255\255\255\
\255\255\042\001\043\001\044\001\045\001\044\001\045\001\255\255\
\049\001\050\001\049\001\050\001\255\255\255\255\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\064\001\
\065\001\255\255\067\001\066\001\069\001\070\001\001\001\002\001\
\255\255\255\255\255\255\255\255\007\001\008\001\009\001\010\001\
\011\001\255\255\255\255\014\001\015\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\023\001\024\001\025\001\255\255\
\027\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\042\001\
\043\001\044\001\045\001\255\255\255\255\255\255\049\001\050\001\
\255\255\255\255\255\255\255\255\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\062\001\063\001\064\001\065\001\255\255\
\067\001\255\255\069\001\070\001\001\001\002\001\255\255\255\255\
\255\255\255\255\007\001\008\001\009\001\010\001\011\001\255\255\
\255\255\014\001\015\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\023\001\024\001\025\001\255\255\027\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\255\255\255\255\255\255\043\001\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\014\001\015\001\
\255\255\255\255\055\001\056\001\057\001\255\255\255\255\023\001\
\024\001\025\001\255\255\027\001\255\255\255\255\067\001\255\255\
\069\001\070\001\255\255\255\255\255\255\255\255\001\001\002\001\
\255\255\255\255\255\255\043\001\007\001\008\001\009\001\010\001\
\011\001\255\255\255\255\014\001\015\001\255\255\255\255\055\001\
\056\001\057\001\255\255\255\255\023\001\024\001\025\001\255\255\
\027\001\255\255\255\255\067\001\255\255\069\001\070\001\255\255\
\255\255\255\255\255\255\001\001\002\001\255\255\255\255\255\255\
\043\001\007\001\008\001\009\001\010\001\011\001\255\255\255\255\
\014\001\015\001\255\255\255\255\055\001\056\001\057\001\255\255\
\255\255\023\001\024\001\025\001\255\255\027\001\255\255\255\255\
\067\001\255\255\069\001\070\001\255\255\255\255\255\255\255\255\
\001\001\002\001\255\255\255\255\255\255\043\001\007\001\008\001\
\009\001\010\001\011\001\255\255\255\255\014\001\015\001\255\255\
\255\255\055\001\056\001\057\001\255\255\255\255\023\001\024\001\
\025\001\255\255\027\001\255\255\255\255\067\001\255\255\069\001\
\070\001\255\255\255\255\255\255\255\255\001\001\002\001\255\255\
\255\255\255\255\043\001\007\001\008\001\009\001\010\001\011\001\
\255\255\255\255\014\001\015\001\255\255\255\255\055\001\056\001\
\057\001\255\255\255\255\023\001\024\001\025\001\255\255\027\001\
\255\255\255\255\067\001\255\255\069\001\070\001\255\255\255\255\
\255\255\255\255\001\001\002\001\255\255\255\255\255\255\043\001\
\007\001\008\001\009\001\010\001\011\001\255\255\255\255\014\001\
\015\001\255\255\255\255\055\001\056\001\057\001\255\255\255\255\
\023\001\024\001\025\001\255\255\027\001\255\255\255\255\067\001\
\255\255\069\001\070\001\255\255\255\255\255\255\255\255\001\001\
\002\001\255\255\255\255\255\255\043\001\007\001\008\001\009\001\
\010\001\011\001\255\255\255\255\014\001\015\001\255\255\255\255\
\055\001\056\001\057\001\255\255\255\255\023\001\024\001\025\001\
\255\255\027\001\255\255\255\255\067\001\255\255\069\001\070\001\
\255\255\255\255\255\255\255\255\001\001\002\001\255\255\255\255\
\255\255\043\001\007\001\008\001\009\001\010\001\011\001\255\255\
\255\255\014\001\015\001\255\255\255\255\055\001\056\001\057\001\
\255\255\255\255\023\001\024\001\025\001\255\255\027\001\255\255\
\255\255\067\001\255\255\069\001\070\001\255\255\255\255\255\255\
\255\255\001\001\002\001\255\255\255\255\255\255\043\001\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\014\001\015\001\
\255\255\255\255\055\001\056\001\057\001\255\255\255\255\023\001\
\024\001\025\001\255\255\027\001\255\255\255\255\067\001\255\255\
\069\001\070\001\255\255\255\255\255\255\255\255\001\001\002\001\
\255\255\255\255\255\255\043\001\007\001\008\001\009\001\010\001\
\011\001\255\255\255\255\014\001\015\001\255\255\255\255\055\001\
\056\001\057\001\255\255\255\255\023\001\024\001\025\001\255\255\
\027\001\255\255\255\255\067\001\255\255\069\001\070\001\255\255\
\255\255\255\255\255\255\001\001\002\001\255\255\255\255\255\255\
\043\001\007\001\008\001\009\001\010\001\011\001\255\255\255\255\
\014\001\015\001\255\255\255\255\055\001\056\001\057\001\255\255\
\255\255\023\001\024\001\025\001\255\255\027\001\255\255\255\255\
\067\001\255\255\069\001\070\001\255\255\255\255\255\255\255\255\
\001\001\002\001\255\255\255\255\255\255\043\001\007\001\008\001\
\009\001\010\001\011\001\255\255\255\255\014\001\015\001\255\255\
\255\255\055\001\255\255\057\001\255\255\255\255\023\001\024\001\
\025\001\255\255\027\001\255\255\255\255\067\001\255\255\069\001\
\070\001\255\255\255\255\255\255\255\255\001\001\002\001\255\255\
\255\255\255\255\043\001\007\001\008\001\009\001\010\001\011\001\
\255\255\255\255\014\001\015\001\255\255\255\255\055\001\255\255\
\255\255\255\255\255\255\023\001\024\001\025\001\255\255\027\001\
\255\255\255\255\067\001\255\255\069\001\070\001\001\001\002\001\
\255\255\255\255\255\255\255\255\007\001\008\001\009\001\043\001\
\011\001\255\255\255\255\014\001\015\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\023\001\024\001\025\001\255\255\
\027\001\255\255\255\255\255\255\255\255\255\255\255\255\067\001\
\255\255\069\001\070\001\255\255\255\255\255\255\255\255\255\255\
\043\001\001\001\002\001\003\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\015\001\
\255\255\255\255\255\255\255\255\020\001\255\255\255\255\255\255\
\067\001\025\001\069\001\070\001\028\001\255\255\255\255\255\255\
\032\001\004\001\005\001\006\001\255\255\037\001\038\001\039\001\
\040\001\012\001\013\001\043\001\015\001\016\001\255\255\018\001\
\019\001\255\255\255\255\255\255\255\255\255\255\255\255\026\001\
\255\255\028\001\029\001\030\001\031\001\255\255\033\001\034\001\
\035\001\036\001\066\001\255\255\255\255\255\255\255\255\255\255\
\255\255\044\001\045\001\255\255\255\255\255\255\049\001\050\001\
\255\255\255\255\255\255\054\001\255\255\255\255\255\255\255\255\
\255\255\004\001\005\001\006\001\255\255\255\255\255\255\066\001\
\067\001\012\001\013\001\255\255\015\001\016\001\255\255\018\001\
\019\001\255\255\255\255\255\255\255\255\255\255\255\255\026\001\
\255\255\028\001\029\001\030\001\031\001\007\001\033\001\034\001\
\035\001\036\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\044\001\045\001\255\255\255\255\255\255\049\001\050\001\
\255\255\255\255\255\255\054\001\255\255\007\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\066\001\
\042\001\255\255\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\255\255\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\062\001\063\001\064\001\065\001\
\042\001\008\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\255\255\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\062\001\063\001\064\001\065\001\
\255\255\008\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\042\001\255\255\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\255\255\
\055\001\056\001\057\001\058\001\059\001\060\001\061\001\062\001\
\063\001\064\001\065\001\042\001\255\255\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\009\001\
\055\001\056\001\057\001\058\001\059\001\060\001\061\001\062\001\
\063\001\064\001\065\001\255\255\255\255\255\255\024\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\010\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\042\001\255\255\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\255\255\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\062\001\063\001\064\001\065\001\
\042\001\011\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\255\255\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\062\001\063\001\064\001\065\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\042\001\255\255\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\255\255\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\062\001\063\001\064\001\065\001\
\019\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\028\001\029\001\030\001\031\001\019\001\033\001\034\001\
\035\001\036\001\255\255\255\255\255\255\255\255\028\001\029\001\
\030\001\031\001\255\255\033\001\034\001\035\001\036\001\255\255\
\255\255\255\255\255\255\054\001\255\255\255\255\255\255\255\255\
\023\001\255\255\255\255\255\255\255\255\255\255\255\255\066\001\
\054\001\068\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\042\001\066\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\027\001\
\055\001\056\001\057\001\058\001\059\001\060\001\061\001\062\001\
\063\001\064\001\065\001\255\255\255\255\255\255\042\001\255\255\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\255\255\055\001\056\001\057\001\058\001\059\001\
\060\001\061\001\062\001\063\001\064\001\065\001\042\001\255\255\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\255\255\055\001\056\001\057\001\058\001\059\001\
\060\001\061\001\062\001\063\001\064\001\065\001\042\001\067\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\255\255\055\001\056\001\057\001\058\001\059\001\
\060\001\061\001\062\001\063\001\064\001\065\001\042\001\255\255\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\255\255\255\255\056\001\057\001\058\001\059\001\
\060\001\061\001\062\001\063\001\064\001\065\001\042\001\255\255\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\255\255\255\255\056\001\255\255\058\001\059\001\
\060\001\061\001\062\001\063\001\064\001\065\001\042\001\255\255\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\255\255\255\255\255\255\255\255\058\001\059\001\
\060\001\061\001\062\001\063\001\064\001\065\001"

let yynames_const = "\
  T_EOF\000\
  T_ANDDEF\000\
  T_ARRAY\000\
  T_BEGIN\000\
  T_DELETE\000\
  T_DIM\000\
  T_DO\000\
  T_DONE\000\
  T_DOWNTO\000\
  T_ELSE\000\
  T_END\000\
  T_FOR\000\
  T_IF\000\
  T_IN\000\
  T_LET\000\
  T_MATCH\000\
  T_MUTABLE\000\
  T_NEW\000\
  T_NOT\000\
  T_OF\000\
  T_REC\000\
  T_REF\000\
  T_THEN\000\
  T_TO\000\
  T_TYPE\000\
  T_WHILE\000\
  T_WITH\000\
  T_ID\000\
  T_CID\000\
  T_FLOAT\000\
  T_INT\000\
  T_CHAR\000\
  T_CONSTCHAR\000\
  T_STRING\000\
  T_FALSE\000\
  T_TRUE\000\
  T_BOOL\000\
  T_UNIT\000\
  T_FLOATST\000\
  T_INTST\000\
  T_GIVES\000\
  T_SEQ\000\
  T_BAR\000\
  T_PLUS\000\
  T_MINUS\000\
  T_TIMES\000\
  T_DIV\000\
  T_MOD\000\
  T_FPLUS\000\
  T_FMINUS\000\
  T_FTIMES\000\
  T_FDIV\000\
  T_POWER\000\
  T_BANK\000\
  T_SMCOLON\000\
  T_AND\000\
  T_OR\000\
  T_NSEQ\000\
  T_L\000\
  T_G\000\
  T_LE\000\
  T_GE\000\
  T_EQ\000\
  T_NEQ\000\
  T_ASSIGN\000\
  T_LPAR\000\
  T_RPAR\000\
  T_LBRACK\000\
  T_RBRACK\000\
  T_COMA\000\
  T_COLON\000\
  "

let yynames_block = "\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 109 "Parser.mly"
                                                            ( () )
# 988 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 113 "Parser.mly"
                                                             ( () )
# 994 "Parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'letdef) in
    Obj.repr(
# 114 "Parser.mly"
                                                             ( print_endline "stmt_list letdef redused tou stmt_list"; () )
# 1002 "Parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typedef) in
    Obj.repr(
# 115 "Parser.mly"
                                                             ( print_endline "stmt_list typedef redused tou stmt_list"; () )
# 1010 "Parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'recmb) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'def) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'anddef) in
    Obj.repr(
# 119 "Parser.mly"
                                                            ( print_endline "T_LET recmb def anddef reduced to  letdef"; () )
# 1019 "Parser.ml"
               : 'letdef))
; (fun __caml_parser_env ->
    Obj.repr(
# 123 "Parser.mly"
                                                            ( () )
# 1025 "Parser.ml"
               : 'recmb))
; (fun __caml_parser_env ->
    Obj.repr(
# 124 "Parser.mly"
                                                            ( print_endline "T_REC reduced to ercmb"; () )
# 1031 "Parser.ml"
               : 'recmb))
; (fun __caml_parser_env ->
    Obj.repr(
# 128 "Parser.mly"
                                                            ( print_endline "nothing reduced to anddef "; () )
# 1037 "Parser.ml"
               : 'anddef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'anddef) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'def) in
    Obj.repr(
# 129 "Parser.mly"
                                                            ( print_endline "anddef T_AND def reduced to anddef"; () )
# 1045 "Parser.ml"
               : 'anddef))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'parstar) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'colontype) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "Parser.mly"
                                                             ( print_endline "T_ID parstar colontype T_EQ exp reduced to def"; () )
# 1054 "Parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'colontype) in
    Obj.repr(
# 134 "Parser.mly"
                                                             ( print_endline "T_MUTABLE T_ID colontype reduced to def"; () )
# 1061 "Parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'comaexpr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'colontype) in
    Obj.repr(
# 136 "Parser.mly"
                                                            ( print_endline "T_MUTABLE T_ID expr comaexpr colontype reduced to def"; () )
# 1070 "Parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    Obj.repr(
# 140 "Parser.mly"
                                                            ( print_endline "nothing reduced to parstar"; () )
# 1076 "Parser.ml"
               : 'parstar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'parstar) in
    Obj.repr(
# 141 "Parser.mly"
                                                            ( print_endline "T_ID reduced to parstar"; () )
# 1083 "Parser.ml"
               : 'parstar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'parstar) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'types) in
    Obj.repr(
# 142 "Parser.mly"
                                                            ( print_endline "T_LPAR T_ID T_COLON types T_RPAR reduced to parstar"; () )
# 1091 "Parser.ml"
               : 'parstar))
; (fun __caml_parser_env ->
    Obj.repr(
# 146 "Parser.mly"
                                                            ( print_endline "nathing reduced to colontype"; () )
# 1097 "Parser.ml"
               : 'colontype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'types) in
    Obj.repr(
# 147 "Parser.mly"
                                                            ( print_endline "reduced to "; () )
# 1104 "Parser.ml"
               : 'colontype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tdef) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'andtdefstar) in
    Obj.repr(
# 151 "Parser.mly"
                                                            ( print_endline "reduced to "; () )
# 1112 "Parser.ml"
               : 'typedef))
; (fun __caml_parser_env ->
    Obj.repr(
# 155 "Parser.mly"
                                                            ( print_endline "nathing reduced to andtdefstar"; () )
# 1118 "Parser.ml"
               : 'andtdefstar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'andtdefstar) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tdef) in
    Obj.repr(
# 156 "Parser.mly"
                                                            ( print_endline "tdefstar T_AND tdef reduced to andtdefstar "; () )
# 1126 "Parser.ml"
               : 'andtdefstar))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'constr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'constrbar) in
    Obj.repr(
# 159 "Parser.mly"
                                                            ( print_endline "reduced to "; () )
# 1134 "Parser.ml"
               : 'tdef))
; (fun __caml_parser_env ->
    Obj.repr(
# 163 "Parser.mly"
                                                            ( print_endline "nathing reduced to constrbar"; () )
# 1140 "Parser.ml"
               : 'constrbar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'constrbar) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constr) in
    Obj.repr(
# 164 "Parser.mly"
                                                            ( print_endline "constrbar T_BAR constr reduced to constrbar"; () )
# 1148 "Parser.ml"
               : 'constrbar))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'oftype) in
    Obj.repr(
# 167 "Parser.mly"
                                                            ( print_endline "T_ID oftype reduced to constr"; () )
# 1155 "Parser.ml"
               : 'constr))
; (fun __caml_parser_env ->
    Obj.repr(
# 170 "Parser.mly"
                                                            ( print_endline "nathing reduced to oftype"; () )
# 1161 "Parser.ml"
               : 'oftype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'oftype) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeplus) in
    Obj.repr(
# 171 "Parser.mly"
                                                            ( print_endline "oftype T_OF typeplus reduced to oftype "; () )
# 1169 "Parser.ml"
               : 'oftype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'types) in
    Obj.repr(
# 175 "Parser.mly"
                                                            ( print_endline "type reduced to typeplus"; () )
# 1176 "Parser.ml"
               : 'typeplus))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typeplus) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'types) in
    Obj.repr(
# 176 "Parser.mly"
                                                            ( print_endline "typeplus types reduced to typeplus"; () )
# 1184 "Parser.ml"
               : 'typeplus))
; (fun __caml_parser_env ->
    Obj.repr(
# 180 "Parser.mly"
                                                           ( print_endline "T_UNIT reduced to type"; () )
# 1190 "Parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    Obj.repr(
# 181 "Parser.mly"
                                                           ( print_endline "T_INTST reduced to type"; () )
# 1196 "Parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    Obj.repr(
# 182 "Parser.mly"
                                                           ( print_endline "T_CHAR reduced to type"; () )
# 1202 "Parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    Obj.repr(
# 183 "Parser.mly"
                                                           ( print_endline "T_BOOL reduced to type"; () )
# 1208 "Parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    Obj.repr(
# 184 "Parser.mly"
                                                           ( print_endline "T_FLOATST reduced to type"; () )
# 1214 "Parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'types) in
    Obj.repr(
# 185 "Parser.mly"
                                                           ( print_endline "T_LPAR type T_RPAR reduced to type"; () )
# 1221 "Parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'types) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'types) in
    Obj.repr(
# 186 "Parser.mly"
                                                           ( print_endline "types T_GIVES types reduced to type"; () )
# 1229 "Parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'types) in
    Obj.repr(
# 187 "Parser.mly"
                                                           ( print_endline "types T_REF reduced to type"; () )
# 1236 "Parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'starlist) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'types) in
    Obj.repr(
# 188 "Parser.mly"
                                                           ( print_endline "T_ARRAY starlist T_OF types reduced to type"; () )
# 1244 "Parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    Obj.repr(
# 189 "Parser.mly"
                                                           ( print_endline "T_ID reduced to type"; () )
# 1250 "Parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    Obj.repr(
# 193 "Parser.mly"
                                                           ( print_endline "nathing reduced to starlist"; () )
# 1256 "Parser.ml"
               : 'starlist))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'comastar) in
    Obj.repr(
# 194 "Parser.mly"
                                                           ( print_endline "T_LBRACK T_TIMES comastar T_RBRACK reduced to starlist"; () )
# 1263 "Parser.ml"
               : 'starlist))
; (fun __caml_parser_env ->
    Obj.repr(
# 198 "Parser.mly"
                                                           ( print_endline "nathing reduced to starlist"; () )
# 1269 "Parser.ml"
               : 'comastar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'comastar) in
    Obj.repr(
# 199 "Parser.mly"
                                                           ( print_endline "commastar T_COMA T_TIMES reduced to comastar"; () )
# 1276 "Parser.ml"
               : 'comastar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 202 "Parser.mly"
                                                           ( print_endline "expr T_FPLUS expr reduced to expr"; () )
# 1284 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 203 "Parser.mly"
                                                           ( print_endline "expr T_PLUS expr reduced to expr"; () )
# 1292 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 204 "Parser.mly"
                                                           ( print_endline "expr T_MINUS expr reduced to expr"; () )
# 1300 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 205 "Parser.mly"
                                                           ( print_endline "expr T_FMINUS expr reduced to expr"; () )
# 1308 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 206 "Parser.mly"
                                                           ( print_endline "expr T_TIMES expr reduced to expr"; () )
# 1316 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 207 "Parser.mly"
                                                           ( print_endline "expr T_FTIMES expr reduced to expr"; () )
# 1324 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 208 "Parser.mly"
                                                           ( print_endline "expr T_DIV expr reduced to expr"; () )
# 1332 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 209 "Parser.mly"
                                                           ( print_endline "expr T_FDIV expr reduced to expr"; () )
# 1340 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 210 "Parser.mly"
                                                           ( print_endline "expr T_MOD expr reduced to expr"; () )
# 1348 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 211 "Parser.mly"
                                                           ( print_endline "expr T_POWER expr reduced to expr"; () )
# 1356 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 212 "Parser.mly"
                                                           ( print_endline "expr T_SEQ expr reduced to expr"; () )
# 1364 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 213 "Parser.mly"
                                                           ( print_endline "expr T_NSEQ expr reduced to expr"; () )
# 1372 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 214 "Parser.mly"
                                                           ( print_endline "expr T_L expr reduced to expr"; () )
# 1380 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 215 "Parser.mly"
                                                           ( print_endline "expr T_G expr reduced to expr"; () )
# 1388 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 216 "Parser.mly"
                                                           ( print_endline "expr T_LE expr reduced to expr"; () )
# 1396 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 217 "Parser.mly"
                                                           ( print_endline "expr T_GE expr reduced to expr"; () )
# 1404 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 218 "Parser.mly"
                                                           ( print_endline "expr T_EQ expr reduced to expr"; () )
# 1412 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 219 "Parser.mly"
                                                           ( print_endline "expr T_NEQ expr reduced to expr"; () )
# 1420 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 220 "Parser.mly"
                                                           ( print_endline "expr T_AND expr reduced to expr"; () )
# 1428 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 221 "Parser.mly"
                                                           ( print_endline "expr T_OR expr reduced rop expr"; () )
# 1436 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 222 "Parser.mly"
                                                           ( print_endline "expr T_SMCOLON expr reduced to expr"; () )
# 1444 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 223 "Parser.mly"
                                                           ( print_endline "expr T_ASSIGN expr reduced to expr"; () )
# 1452 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 224 "Parser.mly"
                                                           ( print_endline "T_PLUS unexpr reduced to unexp"; () )
# 1459 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 225 "Parser.mly"
                                                           ( print_endline "T_FPLUS unexpr reduced to unexp"; () )
# 1466 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 226 "Parser.mly"
                                                           ( print_endline "T_FMINUS unexprreduced to unexp" ;() )
# 1473 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 227 "Parser.mly"
                                                           ( print_endline "T_MINUS unexpr reduced to unexp";() )
# 1480 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 228 "Parser.mly"
                                                           ( print_endline "delete expr reduced to expr"; () )
# 1487 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 229 "Parser.mly"
                                                           ( print_endline "begin expr reduced end reduced to expr"; () )
# 1494 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 230 "Parser.mly"
                                                           ( print_endline "WHILE expr DO expr DONE redused to expr"; () )
# 1502 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'count) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 232 "Parser.mly"
                                                           ( print_endline "T_FOR T_ID T_SEQ expr count expr T_DO expr reduced to expr"; () )
# 1512 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'intmb) in
    Obj.repr(
# 233 "Parser.mly"
                                                           ( print_endline "dim intmb id reduced to expr"; () )
# 1519 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'types) in
    Obj.repr(
# 234 "Parser.mly"
                                                           ( print_endline "T_NEW types reduced to expr"; () )
# 1526 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 235 "Parser.mly"
                                                           ( print_endline "T_IF expr T_THEN expr T_ELSE expr reduced to expr "; () )
# 1535 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 236 "Parser.mly"
                                                           ( print_endline "T_IF expr T_THEN expr reduced to expr "; () )
# 1543 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'letdef) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 237 "Parser.mly"
                                                           ( print_endline "letdef T_IN expr reduced to expr "; () )
# 1551 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'clause) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'clausestar) in
    Obj.repr(
# 238 "Parser.mly"
                                                           ( print_endline "T_MATCH expr T_WITH clause clausestar T_END reduced to expr"; () )
# 1560 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomstar) in
    Obj.repr(
# 239 "Parser.mly"
                                                           ( print_endline "cid bigexpr reduced to bigexpr"; () )
# 1567 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomstar) in
    Obj.repr(
# 240 "Parser.mly"
                                                           ( print_endline "id bigexpr reduced to bigexpr"; () )
# 1574 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atom) in
    Obj.repr(
# 241 "Parser.mly"
                                                           ( print_endline "atom reduced to expr"; () )
# 1581 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 245 "Parser.mly"
                                                           ( print_endline "int reduced to atom";() )
# 1587 "Parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 246 "Parser.mly"
                                                           ( print_endline "float reduced to app"; () )
# 1593 "Parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 247 "Parser.mly"
                                                           ( print_endline "float reduced to app"; () )
# 1599 "Parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 248 "Parser.mly"
                                                           ( print_endline "string reduced to app"; () )
# 1605 "Parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 249 "Parser.mly"
                                                           ( print_endline "true reduced to atom"; () )
# 1611 "Parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 250 "Parser.mly"
                                                           ( print_endline "false reduced to app"; () )
# 1617 "Parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 251 "Parser.mly"
                                                           ( print_endline "unit reduced to app"; () )
# 1623 "Parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 252 "Parser.mly"
                                                           ( print_endline "cid reduced to atom"; () )
# 1629 "Parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 253 "Parser.mly"
                                                           ( print_endline "id reduced to atom"; () )
# 1635 "Parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atom) in
    Obj.repr(
# 254 "Parser.mly"
                                                           ( print_endline "T_NOT atom reduced to atom"; () )
# 1642 "Parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atom) in
    Obj.repr(
# 255 "Parser.mly"
                                                           ( print_endline "T_BANK atom reduced to atom"; () )
# 1649 "Parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'comaexpr) in
    Obj.repr(
# 256 "Parser.mly"
                                                           ( print_endline "id lbrack expr comaexpr rbrac reduced to atom"; () )
# 1657 "Parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 257 "Parser.mly"
                                                           ( print_endline "lpar expr rpar reduced to atom"; () )
# 1664 "Parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 261 "Parser.mly"
                                                           ( print_endline "nothing reduced to comaexpr"; () )
# 1670 "Parser.ml"
               : 'comaexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'comaexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 262 "Parser.mly"
                                                           ( print_endline "comaexpr tcoma bigexpr reduced to comaexpr"; () )
# 1678 "Parser.ml"
               : 'comaexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atom) in
    Obj.repr(
# 267 "Parser.mly"
                                                            ( () )
# 1685 "Parser.ml"
               : 'atomstar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'atom) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomstar) in
    Obj.repr(
# 268 "Parser.mly"
                                                            ( () )
# 1693 "Parser.ml"
               : 'atomstar))
; (fun __caml_parser_env ->
    Obj.repr(
# 273 "Parser.mly"
                                                            ( print_endline "T_TO reduced to count "; () )
# 1699 "Parser.ml"
               : 'count))
; (fun __caml_parser_env ->
    Obj.repr(
# 274 "Parser.mly"
                                                            ( print_endline "T_DOWNTO reduced to count"; () )
# 1705 "Parser.ml"
               : 'count))
; (fun __caml_parser_env ->
    Obj.repr(
# 278 "Parser.mly"
                                                            ( () )
# 1711 "Parser.ml"
               : 'intmb))
; (fun __caml_parser_env ->
    Obj.repr(
# 279 "Parser.mly"
                                                            ( () )
# 1717 "Parser.ml"
               : 'intmb))
; (fun __caml_parser_env ->
    Obj.repr(
# 283 "Parser.mly"
                                                            ( () )
# 1723 "Parser.ml"
               : 'clausestar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'clausestar) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'clause) in
    Obj.repr(
# 284 "Parser.mly"
                                                            ( print_endline "clausestar T_BAR clause reduced to clausestar"; () )
# 1731 "Parser.ml"
               : 'clausestar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 288 "Parser.mly"
                                                            ( print_endline "Patern T_GIVES EXPR reduced to clause"; () )
# 1739 "Parser.ml"
               : 'clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pattom) in
    Obj.repr(
# 292 "Parser.mly"
                                                            ( print_endline "Patom Redused to pattern"; ())
# 1746 "Parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'patternstar) in
    Obj.repr(
# 293 "Parser.mly"
                                                            ( print_endline "T_ID patternstar reduced to pattern"; () )
# 1753 "Parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'sign) in
    Obj.repr(
# 297 "Parser.mly"
                                                            ( print_endline "sign T_INT reduced to pattern"; () )
# 1760 "Parser.ml"
               : 'pattom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fsign) in
    Obj.repr(
# 298 "Parser.mly"
                                                            ( print_endline "sign T_FLOAT reduced to pattern"; () )
# 1767 "Parser.ml"
               : 'pattom))
; (fun __caml_parser_env ->
    Obj.repr(
# 299 "Parser.mly"
                                                            ( print_endline "T_CONSTCHAR reduced to pattern"; () )
# 1773 "Parser.ml"
               : 'pattom))
; (fun __caml_parser_env ->
    Obj.repr(
# 300 "Parser.mly"
                                                            ( print_endline "T_TRUE reduced to pattern"; () )
# 1779 "Parser.ml"
               : 'pattom))
; (fun __caml_parser_env ->
    Obj.repr(
# 301 "Parser.mly"
                                                            ( print_endline "T_FALSE reduced to pattern"; () )
# 1785 "Parser.ml"
               : 'pattom))
; (fun __caml_parser_env ->
    Obj.repr(
# 302 "Parser.mly"
                                                            ( print_endline "T_ID reduced to pattern"; () )
# 1791 "Parser.ml"
               : 'pattom))
; (fun __caml_parser_env ->
    Obj.repr(
# 303 "Parser.mly"
                                                             ( print_endline "T_CID reduced to pattern"; () )
# 1797 "Parser.ml"
               : 'pattom))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pattern) in
    Obj.repr(
# 304 "Parser.mly"
                                                            ( print_endline "T_LPAR pattern T_RPAR reduced to pattern"; () )
# 1804 "Parser.ml"
               : 'pattom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pattom) in
    Obj.repr(
# 308 "Parser.mly"
                                                            ( print_endline "Pattom reduced to patternstar"; () )
# 1811 "Parser.ml"
               : 'patternstar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'patternstar) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pattom) in
    Obj.repr(
# 309 "Parser.mly"
                                                            ( print_endline"patternstar pattom reduced to patternstar"; () )
# 1819 "Parser.ml"
               : 'patternstar))
; (fun __caml_parser_env ->
    Obj.repr(
# 313 "Parser.mly"
                                                            ( print_endline "T_PLUS reduced to sign"; () )
# 1825 "Parser.ml"
               : 'sign))
; (fun __caml_parser_env ->
    Obj.repr(
# 314 "Parser.mly"
                                                            ( print_endline "T_MINUS reduced to sign"; () )
# 1831 "Parser.ml"
               : 'sign))
; (fun __caml_parser_env ->
    Obj.repr(
# 319 "Parser.mly"
                                                             ( print_endline "T_FPLUS reduced to sign"; () )
# 1837 "Parser.ml"
               : 'fsign))
; (fun __caml_parser_env ->
    Obj.repr(
# 320 "Parser.mly"
                                                             ( print_endline "T_FMINUS reduced to sign"; () )
# 1843 "Parser.ml"
               : 'fsign))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : unit)
;;
# 323 "Parser.mly"
 
# 1870 "Parser.ml"
