(** Type Inference *)

exception TypeError of string * Types.typ
exception UnifyError of Types.typ * Types.typ
exception DimSizeError of int * int
exception DimAccesError of int * int
exception UnsolvedTyVar of Types.typ
exception UnsolvedDimVar of Types.dim

val debug_typeinf : bool
(** If this flag is set to true a list containing the solved types is printed
    on the standard output *)

val print_constraints : (Types.typ * Types.typ) list -> unit
(** This funstion prints a list of constraints in the standard output *)

val solved_types : (Types.typ, Types.typ) Hashtbl.t
(** A hashtable containing the solved types for fast lookups *)

val add_solved_table : (Types.typ * Types.typ) list -> unit
(** This function adds a new tuple to the above hashtable *)

val lookup_solved : Types.typ -> Types.typ
(** This function lookups a type variable in the above hashtable *)

val fresh : unit -> Types.typ
(** This function returns a fresh type variable *)

val dim_size : int -> Types.dim

val freshDim : unit -> Types.dim
(** This function returns a fresh dimention type variable *)

val dimConstraints : (Types.dim * Types.dim) list ref
(** This list holds dimention constraints generated by dim i a expressions *)

val dimsGeq : Types.dim -> int -> unit
(** This funstion add  a constraint to the above list *)

val singleSubDim : Types.dim -> Types.dim -> Types.dim -> Types.dim
(** This function subbstitutes a dimension variable with a dimension type *)                

val subDim :
  Types.dim ->
  Types.dim -> (Types.dim * Types.dim) list -> (Types.dim * Types.dim) list
(* This function substitutes a dimension variable with a dimension type in a
   list of dimention types *)                

val singleSubArray : Types.dim -> Types.dim -> Types.typ -> Types.typ
(** This function substitutes a dimension variable with a dimension type 
    in an array type *)                

val subArray :
  Types.dim ->
  Types.dim -> (Types.typ * Types.typ) list -> (Types.typ * Types.typ) list
(** This function substitutes a dimension variable with a dimension type 
    in an array type in a list of types *)                

val refresh : Types.typ -> Types.typ
(** This function returns a fresh type variable if the given type is undefined *)


val notIn : Types.typ -> Types.typ -> bool
(** Check whether a types occurs in an other *)

val singleSub : Types.typ -> Types.typ -> Types.typ -> Types.typ
(** Substitute a type variable with a type in an other type *)

val subc :
  Types.typ ->
  Types.typ -> (Types.typ * Types.typ) list -> (Types.typ * Types.typ) list
(** Substitute a type variable with a type in a tuple list of types *)

val subl : Types.typ -> Types.typ -> Types.typ list -> Types.typ list
(** Substitute a type variable with a type in a simple list of types *)

val unify : (Types.typ * Types.typ) list -> (Types.typ * Types.typ) list
(** unify the list of constraints *)

